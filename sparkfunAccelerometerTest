
int scale = 3;
boolean micro_is_5V = false; 
void setup()
{
  // Initialize serial communication at 115200 baud
  Serial.begin(115200);
}
void loop()
{
  // Get raw accelerometer data for each axis
  int rawX = analogRead(A1);
  int rawY = analogRead(A2);
  int rawZ = analogRead(A3);
   float scaledX, scaledY, scaledZ; // Scaled values for each axis
  if (micro_is_5V) // microcontroller runs off 5V
  {
    scaledX = mapf(rawX, 0, 675, -scale, scale); // 3.3/5 * 1023 =~ 675
    
  }
  else // microcontroller runs off 3.3V
  {
    scaledX = mapf(rawX, 0, 1023, -scale, scale);
    scaledY = mapf(rawY, 0, 1023, -scale, scale);
    scaledZ = mapf(rawZ, 0, 1023, -scale, scale);
  }
    // Print out raw X,Y,Z accelerometer readings
  //Serial.print("X: "); Serial.println(rawX);

  // Print out scaled X,Y,Z accelerometer readings
  Serial.print("X: "); Serial.print(scaledX); Serial.println(" g");
  Serial.print("Y: "); Serial.print(scaledY); Serial.println(" g");
  Serial.print("Z: "); Serial.print(scaledZ); Serial.println(" g");
delay(2000);
  if ((-1*scaledY <= 0.8)||(-1*scaledX <=0.75)||(-1*scaledZ <= 1.2)) {
    Serial.println("Fall Detection System Activated...");
  }
}

// Same functionality as Arduino's standard map function, except using floats
float mapf(float x, float in_min, float in_max, float out_min, float out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
